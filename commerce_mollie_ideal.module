<?php
// $Id$

/**
 * @file
 * Implements Mollie iDEAL payment services for use with Drupal Commerce.
 *
 * Geoffrey de Vlugt - Renaissance IT
 */

// Mollie iDEAL API class
include_once('ideal.class.php');

/**
 * Implements hook_menu().
 */
function commerce_mollie_ideal_menu() {
  $items = array();
  
  $items['commerce_ideal/report/%/%'] = array(
    'title' => 'Mollie iDEAL Payment',
    'page callback' => 'commerce_mollie_ideal_report',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['commerce_ideal/return/%/%'] = array(
    'title' => 'Mollie iDEAL Payment',
    'page callback' => 'commerce_mollie_ideal_return',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mollie_ideal_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_mollie_ideal'] = array(
    'title' => t('Mollie iDEAL'),
    'description' => t('Integrates Mollie iDEAL payment services support.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

 /**
  * Implements hook_commerce_settings_form().
  */
function commerce_mollie_ideal_settings_form($settings = NULL) {
  $form = array();
  
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'commerce_mollie_ideal_partner_id' => '',
    'commerce_mollie_ideal_profile_key' => '',
    'commerce_mollie_ideal_test_mode' => 0,
  );
  
  $form['commerce_mollie_ideal_partner_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie Partner ID'),
    '#description' => t('Your Mollie partner ID.'),
    '#default_value' => $settings['commerce_mollie_ideal_partner_id'],
    '#required' => TRUE,
  );

  $form['commerce_mollie_ideal_profile_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Mollie Profile key'),
    '#description' => t('Your Mollie profile key.'),
    '#default_value' => $settings['commerce_mollie_ideal_profile_key'],
    '#required' => TRUE,
  );

  $form['commerce_mollie_ideal_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable test mode'),
    '#description' => t('Check this option to enable test mode.'),
    '#default_value' => $settings['commerce_mollie_ideal_test_mode'],
  );

  return $form;
}

/**
 * Implements hook_commerce_submit_form().
 */ 
function commerce_mollie_ideal_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_mollie_ideal'])) {
    $pane_values += $order->data['commerce_mollie_ideal'];
  }

  // Instantiate iDEAL_Payment object.
  $iDEAL = new iDEAL_Payment($payment_method['settings']['commerce_mollie_ideal_partner_id']);
  $iDEAL->setTestmode($payment_method['settings']['commerce_mollie_ideal_test_mode']);

  $form['commerce_mollie_ideal_bank'] = array(
    '#type' => 'select',
    '#title' => t('Bank'),
    '#options' => $iDEAL->getBanks(),
    '#default_value' => $payment_method['settings']['commerce_mollie_ideal_test_mode'] == 0 ? $order->data['commerce_mollie_ideal']['commerce_mollie_ideal_bank'] : '',
    '#description' => t('Please select your bank.'),
  );

  return $form;
}

/**
 * Implements hook_commerce_submit_form_validate().
 */
function commerce_mollie_ideal_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Instantiate iDEAL_Payment object.
  $iDEAL = new iDEAL_Payment($payment_method['settings']['commerce_mollie_ideal_partner_id']);
  $iDEAL->setTestmode($payment_method['settings']['commerce_mollie_ideal_test_mode']);

  // Throw an error if the chosen bank isn't available through Mollie.
  if (in_array($pane_values['commerce_mollie_ideal_bank'], array_keys($iDEAL->getBanks())) === FALSE) {
    form_set_error(implode('][', array_merge($form_parents, array('commerce_mollie_ideal_bank'))), t('The bank you chose is not available.'));    
    return FALSE;
  }
}

/**
 * Implements hook_commerce_submit_form_submit().
 */
function commerce_mollie_ideal_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $transaction_id = commerce_mollie_ideal_transaction($payment_method, $order, $charge);

  $order->data['commerce_mollie_ideal'] = $pane_values;
  $order->data['transaction_id'] = $transaction_id;
}

/**
 * Implements hook_commerce_redirect_form().
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_mollie_ideal_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  // Get amount (in cents)
  $amount = $wrapper->commerce_order_total->amount->value();

  // Order description which will be submitted to Mollie.
  $payment_description  = t("Order @order_id - @site_name", array('@order_id' => $order->order_number, '@site_name' => variable_get('site_name', '')));

  // Retrieve the transaction id.
  $transaction_id = $order->data['transaction_id'];

  // Instantiate iDEAL_Payment object.
  $iDEAL = new iDEAL_Payment($payment_method['settings']['commerce_mollie_ideal_partner_id']);
  $iDEAL->setTestmode($payment_method['settings']['commerce_mollie_ideal_test_mode']);

  // The url of the page the customer should be returned back to by Mollie.
  $return_url = url('commerce_ideal/return/' . $order->order_id . '/' . $transaction_id, array('absolute' => TRUE));
  // The url of the callback script which Mollie should call in case of a payment status update.
  $report_url = url('commerce_ideal/report/' . $order->order_id . '/' . $transaction_id, array('absolute' => TRUE));

  // Create a payment.
  if ($iDEAL->createPayment($order->data['commerce_mollie_ideal']['commerce_mollie_ideal_bank'], $amount, $payment_description, $return_url, $report_url)) {
    $form['#action'] = $iDEAL->getBankURL();
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Proceed with payment'),
    );
    commerce_mollie_ideal_transaction_set_mollie_transaction_id($transaction_id, $iDEAL->getTransactionId());
  }
  else {
    watchdog('commerce_mollie_ideal', 'Could not create a Mollie payment. Error: %error', array('%error' => $iDEAL->getErrorMessage()), WATCHDOG_ERROR);
    drupal_set_message(t('An error occured while preparing your iDEAL payment. Please try again or contact the webmaster.'), 'error');
    drupal_goto('cart/checkout');
  }  

  return $form;
}

function commerce_mollie_ideal_return($order_id, $transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);

  if ($transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    drupal_goto('checkout/' . $order_id . '/complete');
  }
  else {
    watchdog('commerce_mollie_ideal', 'The payment was cancelled or something went wrong.', array(), WATCHDOG_WARNING);
    drupal_set_message(t('The payment was cancelled or something went wrong.'), 'error');
    drupal_goto('checkout/' . $order_id);
  }
}  

/**
 * Payment method callback: Ask Mollie for the status of the payment.
 */
function commerce_mollie_ideal_report($order_id, $transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $order = commerce_order_load($transaction->order_id);

  // Instantiate iDEAL_Payment object.
  $iDEAL = new iDEAL_Payment($payment_method['settings']['commerce_mollie_ideal_partner_id']);
  $iDEAL->setTestmode($payment_method['settings']['commerce_mollie_ideal_test_mode']);
  
  // Check if the payment succeeded or not.
  $iDEAL->checkPayment($_GET['transaction_id']);

  if ($iDEAL->getPaidStatus() == TRUE) {
    watchdog('commerce_mollie_ideal', 'Successful Mollie iDEAL payment %transaction_id', array('%transaction_id' => $_GET['transaction_id']), WATCHDOG_NOTICE);
    commerce_mollie_ideal_transaction_set_status($transaction_id, COMMERCE_PAYMENT_STATUS_SUCCESS, t('The payment has completed'));
  }
  
  // TODO: Check usage of commerce redirect functions.
  if ($iDEAL->getPaidStatus() == TRUE) {
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
  }
}  

/**
 * Creates an Mollie iDEAL payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_mollie_ideal_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_mollie_ideal', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  
  commerce_payment_transaction_save($transaction);

  return $transaction->transaction_id;
}

function commerce_mollie_ideal_transaction_set_mollie_transaction_id($transaction_id, $mollie_transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);
  $transaction->remote_id = $mollie_transaction_id;
  commerce_payment_transaction_save($transaction);
}

function commerce_mollie_ideal_transaction_set_status($transaction_id, $status, $message = '') {
  $transaction =  commerce_payment_transaction_load($transaction_id);
  $transaction->status = $status;
  $transaction->message = $message;
  commerce_payment_transaction_save($transaction);
}